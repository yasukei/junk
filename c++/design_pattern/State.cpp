/*
 * State
 *
 * 目的
 * オブジェクトの内部状態が変化したときに、オブジェクトが振る舞いを変えるようにする。
 * クラス内では、振る舞いの変化を記述せず、状態を表すオブジェクトを導入することでこれを実現する。
 *
 * 適用可能性
 * ・オブジェクトの振る舞いが状態に依存し、
 * 　実行時にはオブジェクトがその状態により振る舞いを変えなければならない場合。
 * ・オペレーションが、オブジェクトの状態に依存した多岐にわたる条件文を持っている場合。
 * 　この状態はたいてい1つ以上の列挙型の定数で表されており、
 * 　たびたび複数のオペレーションに同じ条件構造が現れる。
 * 　Stateパターンでは、1つ1つの条件分岐を別々のクラスに受け持たせる。
 * 　これにより、オブジェクトの各状態を1つのオブジェクトとして扱うことができる。
 */

// Contextクラスの個々の状態に関する振る舞いをカプセル化するためのインタフェースを定義する。
class State
{
	public:
		void Handle(void);
};

// Contextクラスの1つの状態に関する振る舞いが実装される。
class ConcreteStateA : public State
{
};

class ConcreteStateB : public State
{
};

// クライアントに必要なインタフェースを定義する。
// 状態を表すConcreteStateクラスのインスタンスを保持する。
class Context
{
	public:
		void Request(void)
		{
			state_->Handle();
		}

	protected:
		State* state_;
};

