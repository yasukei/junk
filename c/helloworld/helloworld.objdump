
helloworld:     ファイル形式 elf32-i386


セクション .interp の逆アセンブル:

08048154 <.interp>:
 8048154:	2f                   	das    
 8048155:	6c                   	insb   (%dx),%es:(%edi)
 8048156:	69 62 2f 6c 64 2d 6c 	imul   $0x6c2d646c,0x2f(%edx),%esp
 804815d:	69 6e 75 78 2e 73 6f 	imul   $0x6f732e78,0x75(%esi),%ebp
 8048164:	2e 32 00             	xor    %cs:(%eax),%al

セクション .note.ABI-tag の逆アセンブル:

08048168 <.note.ABI-tag>:
 8048168:	04 00                	add    $0x0,%al
 804816a:	00 00                	add    %al,(%eax)
 804816c:	10 00                	adc    %al,(%eax)
 804816e:	00 00                	add    %al,(%eax)
 8048170:	01 00                	add    %eax,(%eax)
 8048172:	00 00                	add    %al,(%eax)
 8048174:	47                   	inc    %edi
 8048175:	4e                   	dec    %esi
 8048176:	55                   	push   %ebp
 8048177:	00 00                	add    %al,(%eax)
 8048179:	00 00                	add    %al,(%eax)
 804817b:	00 02                	add    %al,(%edx)
 804817d:	00 00                	add    %al,(%eax)
 804817f:	00 06                	add    %al,(%esi)
 8048181:	00 00                	add    %al,(%eax)
 8048183:	00 18                	add    %bl,(%eax)
 8048185:	00 00                	add    %al,(%eax)
	...

セクション .note.gnu.build-id の逆アセンブル:

08048188 <.note.gnu.build-id>:
 8048188:	04 00                	add    $0x0,%al
 804818a:	00 00                	add    %al,(%eax)
 804818c:	14 00                	adc    $0x0,%al
 804818e:	00 00                	add    %al,(%eax)
 8048190:	03 00                	add    (%eax),%eax
 8048192:	00 00                	add    %al,(%eax)
 8048194:	47                   	inc    %edi
 8048195:	4e                   	dec    %esi
 8048196:	55                   	push   %ebp
 8048197:	00 c5                	add    %al,%ch
 8048199:	59                   	pop    %ecx
 804819a:	8a 34 64             	mov    (%esp,%eiz,2),%dh
 804819d:	bf a5 52 de 49       	mov    $0x49de52a5,%edi
 80481a2:	79 b5                	jns    8048159 <_init-0x157>
 80481a4:	59                   	pop    %ecx
 80481a5:	ab                   	stos   %eax,%es:(%edi)
 80481a6:	f8                   	clc    
 80481a7:	bd 37 df 23 2b       	mov    $0x2b23df37,%ebp

セクション .gnu.hash の逆アセンブル:

080481ac <.gnu.hash>:
 80481ac:	02 00                	add    (%eax),%al
 80481ae:	00 00                	add    %al,(%eax)
 80481b0:	04 00                	add    $0x0,%al
 80481b2:	00 00                	add    %al,(%eax)
 80481b4:	01 00                	add    %eax,(%eax)
 80481b6:	00 00                	add    %al,(%eax)
 80481b8:	05 00 00 00 00       	add    $0x0,%eax
 80481bd:	20 00                	and    %al,(%eax)
 80481bf:	20 00                	and    %al,(%eax)
 80481c1:	00 00                	add    %al,(%eax)
 80481c3:	00 04 00             	add    %al,(%eax,%eax,1)
 80481c6:	00 00                	add    %al,(%eax)
 80481c8:	ad                   	lods   %ds:(%esi),%eax
 80481c9:	4b                   	dec    %ebx
 80481ca:	e3 c0                	jecxz  804818c <_init-0x124>

セクション .dynsym の逆アセンブル:

080481cc <.dynsym>:
	...
 80481dc:	1a 00                	sbb    (%eax),%al
	...
 80481e6:	00 00                	add    %al,(%eax)
 80481e8:	12 00                	adc    (%eax),%al
 80481ea:	00 00                	add    %al,(%eax)
 80481ec:	31 00                	xor    %eax,(%eax)
	...
 80481f6:	00 00                	add    %al,(%eax)
 80481f8:	20 00                	and    %al,(%eax)
 80481fa:	00 00                	add    %al,(%eax)
 80481fc:	1f                   	pop    %ds
	...
 8048205:	00 00                	add    %al,(%eax)
 8048207:	00 12                	add    %dl,(%edx)
 8048209:	00 00                	add    %al,(%eax)
 804820b:	00 0b                	add    %cl,(%ebx)
 804820d:	00 00                	add    %al,(%eax)
 804820f:	00 cc                	add    %cl,%ah
 8048211:	84 04 08             	test   %al,(%eax,%ecx,1)
 8048214:	04 00                	add    $0x0,%al
 8048216:	00 00                	add    %al,(%eax)
 8048218:	11 00                	adc    %eax,(%eax)
 804821a:	0f                   	.byte 0xf
	...

セクション .dynstr の逆アセンブル:

0804821c <.dynstr>:
 804821c:	00 6c 69 62          	add    %ch,0x62(%ecx,%ebp,2)
 8048220:	63 2e                	arpl   %bp,(%esi)
 8048222:	73 6f                	jae    8048293 <_init-0x1d>
 8048224:	2e 36 00 5f 49       	cs add %bl,%cs:%ss:0x49(%edi)
 8048229:	4f                   	dec    %edi
 804822a:	5f                   	pop    %edi
 804822b:	73 74                	jae    80482a1 <_init-0xf>
 804822d:	64 69 6e 5f 75 73 65 	imul   $0x64657375,%fs:0x5f(%esi),%ebp
 8048234:	64 
 8048235:	00 70 75             	add    %dh,0x75(%eax)
 8048238:	74 73                	je     80482ad <_init-0x3>
 804823a:	00 5f 5f             	add    %bl,0x5f(%edi)
 804823d:	6c                   	insb   (%dx),%es:(%edi)
 804823e:	69 62 63 5f 73 74 61 	imul   $0x6174735f,0x63(%edx),%esp
 8048245:	72 74                	jb     80482bb <_init+0xb>
 8048247:	5f                   	pop    %edi
 8048248:	6d                   	insl   (%dx),%es:(%edi)
 8048249:	61                   	popa   
 804824a:	69 6e 00 5f 5f 67 6d 	imul   $0x6d675f5f,0x0(%esi),%ebp
 8048251:	6f                   	outsl  %ds:(%esi),(%dx)
 8048252:	6e                   	outsb  %ds:(%esi),(%dx)
 8048253:	5f                   	pop    %edi
 8048254:	73 74                	jae    80482ca <_init+0x1a>
 8048256:	61                   	popa   
 8048257:	72 74                	jb     80482cd <_init+0x1d>
 8048259:	5f                   	pop    %edi
 804825a:	5f                   	pop    %edi
 804825b:	00 47 4c             	add    %al,0x4c(%edi)
 804825e:	49                   	dec    %ecx
 804825f:	42                   	inc    %edx
 8048260:	43                   	inc    %ebx
 8048261:	5f                   	pop    %edi
 8048262:	32 2e                	xor    (%esi),%ch
 8048264:	30 00                	xor    %al,(%eax)

セクション .gnu.version の逆アセンブル:

08048266 <.gnu.version>:
 8048266:	00 00                	add    %al,(%eax)
 8048268:	02 00                	add    (%eax),%al
 804826a:	00 00                	add    %al,(%eax)
 804826c:	02 00                	add    (%eax),%al
 804826e:	01 00                	add    %eax,(%eax)

セクション .gnu.version_r の逆アセンブル:

08048270 <.gnu.version_r>:
 8048270:	01 00                	add    %eax,(%eax)
 8048272:	01 00                	add    %eax,(%eax)
 8048274:	01 00                	add    %eax,(%eax)
 8048276:	00 00                	add    %al,(%eax)
 8048278:	10 00                	adc    %al,(%eax)
 804827a:	00 00                	add    %al,(%eax)
 804827c:	00 00                	add    %al,(%eax)
 804827e:	00 00                	add    %al,(%eax)
 8048280:	10 69 69             	adc    %ch,0x69(%ecx)
 8048283:	0d 00 00 02 00       	or     $0x20000,%eax
 8048288:	40                   	inc    %eax
 8048289:	00 00                	add    %al,(%eax)
 804828b:	00 00                	add    %al,(%eax)
 804828d:	00 00                	add    %al,(%eax)
	...

セクション .rel.dyn の逆アセンブル:

08048290 <.rel.dyn>:
 8048290:	fc                   	cld    
 8048291:	9f                   	lahf   
 8048292:	04 08                	add    $0x8,%al
 8048294:	06                   	push   %es
 8048295:	02 00                	add    (%eax),%al
	...

セクション .rel.plt の逆アセンブル:

08048298 <.rel.plt>:
 8048298:	0c a0                	or     $0xa0,%al
 804829a:	04 08                	add    $0x8,%al
 804829c:	07                   	pop    %es
 804829d:	01 00                	add    %eax,(%eax)
 804829f:	00 10                	add    %dl,(%eax)
 80482a1:	a0 04 08 07 02       	mov    0x2070804,%al
 80482a6:	00 00                	add    %al,(%eax)
 80482a8:	14 a0                	adc    $0xa0,%al
 80482aa:	04 08                	add    $0x8,%al
 80482ac:	07                   	pop    %es
 80482ad:	03 00                	add    (%eax),%eax
	...

セクション .init の逆アセンブル:

080482b0 <_init>:
 80482b0:	53                   	push   %ebx
 80482b1:	83 ec 08             	sub    $0x8,%esp
 80482b4:	e8 97 00 00 00       	call   8048350 <__x86.get_pc_thunk.bx>
 80482b9:	81 c3 47 1d 00 00    	add    $0x1d47,%ebx
 80482bf:	8b 83 fc ff ff ff    	mov    -0x4(%ebx),%eax
 80482c5:	85 c0                	test   %eax,%eax
 80482c7:	74 05                	je     80482ce <_init+0x1e>
 80482c9:	e8 32 00 00 00       	call   8048300 <__gmon_start__@plt>
 80482ce:	83 c4 08             	add    $0x8,%esp
 80482d1:	5b                   	pop    %ebx
 80482d2:	c3                   	ret    

セクション .plt の逆アセンブル:

080482e0 <puts@plt-0x10>:
 80482e0:	ff 35 04 a0 04 08    	pushl  0x804a004
 80482e6:	ff 25 08 a0 04 08    	jmp    *0x804a008
 80482ec:	00 00                	add    %al,(%eax)
	...

080482f0 <puts@plt>:
 80482f0:	ff 25 0c a0 04 08    	jmp    *0x804a00c
 80482f6:	68 00 00 00 00       	push   $0x0
 80482fb:	e9 e0 ff ff ff       	jmp    80482e0 <_init+0x30>

08048300 <__gmon_start__@plt>:
 8048300:	ff 25 10 a0 04 08    	jmp    *0x804a010
 8048306:	68 08 00 00 00       	push   $0x8
 804830b:	e9 d0 ff ff ff       	jmp    80482e0 <_init+0x30>

08048310 <__libc_start_main@plt>:
 8048310:	ff 25 14 a0 04 08    	jmp    *0x804a014
 8048316:	68 10 00 00 00       	push   $0x10
 804831b:	e9 c0 ff ff ff       	jmp    80482e0 <_init+0x30>

セクション .text の逆アセンブル:

08048320 <_start>:
 8048320:	31 ed                	xor    %ebp,%ebp
 8048322:	5e                   	pop    %esi
 8048323:	89 e1                	mov    %esp,%ecx
 8048325:	83 e4 f0             	and    $0xfffffff0,%esp
 8048328:	50                   	push   %eax
 8048329:	54                   	push   %esp
 804832a:	52                   	push   %edx
 804832b:	68 b0 84 04 08       	push   $0x80484b0
 8048330:	68 40 84 04 08       	push   $0x8048440
 8048335:	51                   	push   %ecx
 8048336:	56                   	push   %esi
 8048337:	68 1d 84 04 08       	push   $0x804841d
 804833c:	e8 cf ff ff ff       	call   8048310 <__libc_start_main@plt>
 8048341:	f4                   	hlt    
 8048342:	66 90                	xchg   %ax,%ax
 8048344:	66 90                	xchg   %ax,%ax
 8048346:	66 90                	xchg   %ax,%ax
 8048348:	66 90                	xchg   %ax,%ax
 804834a:	66 90                	xchg   %ax,%ax
 804834c:	66 90                	xchg   %ax,%ax
 804834e:	66 90                	xchg   %ax,%ax

08048350 <__x86.get_pc_thunk.bx>:
 8048350:	8b 1c 24             	mov    (%esp),%ebx
 8048353:	c3                   	ret    
 8048354:	66 90                	xchg   %ax,%ax
 8048356:	66 90                	xchg   %ax,%ax
 8048358:	66 90                	xchg   %ax,%ax
 804835a:	66 90                	xchg   %ax,%ax
 804835c:	66 90                	xchg   %ax,%ax
 804835e:	66 90                	xchg   %ax,%ax

08048360 <deregister_tm_clones>:
 8048360:	b8 23 a0 04 08       	mov    $0x804a023,%eax
 8048365:	2d 20 a0 04 08       	sub    $0x804a020,%eax
 804836a:	83 f8 06             	cmp    $0x6,%eax
 804836d:	77 01                	ja     8048370 <deregister_tm_clones+0x10>
 804836f:	c3                   	ret    
 8048370:	b8 00 00 00 00       	mov    $0x0,%eax
 8048375:	85 c0                	test   %eax,%eax
 8048377:	74 f6                	je     804836f <deregister_tm_clones+0xf>
 8048379:	55                   	push   %ebp
 804837a:	89 e5                	mov    %esp,%ebp
 804837c:	83 ec 18             	sub    $0x18,%esp
 804837f:	c7 04 24 20 a0 04 08 	movl   $0x804a020,(%esp)
 8048386:	ff d0                	call   *%eax
 8048388:	c9                   	leave  
 8048389:	c3                   	ret    
 804838a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

08048390 <register_tm_clones>:
 8048390:	b8 20 a0 04 08       	mov    $0x804a020,%eax
 8048395:	2d 20 a0 04 08       	sub    $0x804a020,%eax
 804839a:	c1 f8 02             	sar    $0x2,%eax
 804839d:	89 c2                	mov    %eax,%edx
 804839f:	c1 ea 1f             	shr    $0x1f,%edx
 80483a2:	01 d0                	add    %edx,%eax
 80483a4:	d1 f8                	sar    %eax
 80483a6:	75 01                	jne    80483a9 <register_tm_clones+0x19>
 80483a8:	c3                   	ret    
 80483a9:	ba 00 00 00 00       	mov    $0x0,%edx
 80483ae:	85 d2                	test   %edx,%edx
 80483b0:	74 f6                	je     80483a8 <register_tm_clones+0x18>
 80483b2:	55                   	push   %ebp
 80483b3:	89 e5                	mov    %esp,%ebp
 80483b5:	83 ec 18             	sub    $0x18,%esp
 80483b8:	89 44 24 04          	mov    %eax,0x4(%esp)
 80483bc:	c7 04 24 20 a0 04 08 	movl   $0x804a020,(%esp)
 80483c3:	ff d2                	call   *%edx
 80483c5:	c9                   	leave  
 80483c6:	c3                   	ret    
 80483c7:	89 f6                	mov    %esi,%esi
 80483c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edi

080483d0 <__do_global_dtors_aux>:
 80483d0:	80 3d 20 a0 04 08 00 	cmpb   $0x0,0x804a020
 80483d7:	75 13                	jne    80483ec <__do_global_dtors_aux+0x1c>
 80483d9:	55                   	push   %ebp
 80483da:	89 e5                	mov    %esp,%ebp
 80483dc:	83 ec 08             	sub    $0x8,%esp
 80483df:	e8 7c ff ff ff       	call   8048360 <deregister_tm_clones>
 80483e4:	c6 05 20 a0 04 08 01 	movb   $0x1,0x804a020
 80483eb:	c9                   	leave  
 80483ec:	f3 c3                	repz ret 
 80483ee:	66 90                	xchg   %ax,%ax

080483f0 <frame_dummy>:
 80483f0:	a1 10 9f 04 08       	mov    0x8049f10,%eax
 80483f5:	85 c0                	test   %eax,%eax
 80483f7:	74 1f                	je     8048418 <frame_dummy+0x28>
 80483f9:	b8 00 00 00 00       	mov    $0x0,%eax
 80483fe:	85 c0                	test   %eax,%eax
 8048400:	74 16                	je     8048418 <frame_dummy+0x28>
 8048402:	55                   	push   %ebp
 8048403:	89 e5                	mov    %esp,%ebp
 8048405:	83 ec 18             	sub    $0x18,%esp
 8048408:	c7 04 24 10 9f 04 08 	movl   $0x8049f10,(%esp)
 804840f:	ff d0                	call   *%eax
 8048411:	c9                   	leave  
 8048412:	e9 79 ff ff ff       	jmp    8048390 <register_tm_clones>
 8048417:	90                   	nop
 8048418:	e9 73 ff ff ff       	jmp    8048390 <register_tm_clones>

0804841d <main>:
 804841d:	55                   	push   %ebp
 804841e:	89 e5                	mov    %esp,%ebp
 8048420:	83 e4 f0             	and    $0xfffffff0,%esp
 8048423:	83 ec 10             	sub    $0x10,%esp
 8048426:	c7 04 24 d0 84 04 08 	movl   $0x80484d0,(%esp)
 804842d:	e8 be fe ff ff       	call   80482f0 <puts@plt>
 8048432:	b8 00 00 00 00       	mov    $0x0,%eax
 8048437:	c9                   	leave  
 8048438:	c3                   	ret    
 8048439:	66 90                	xchg   %ax,%ax
 804843b:	66 90                	xchg   %ax,%ax
 804843d:	66 90                	xchg   %ax,%ax
 804843f:	90                   	nop

08048440 <__libc_csu_init>:
 8048440:	55                   	push   %ebp
 8048441:	57                   	push   %edi
 8048442:	31 ff                	xor    %edi,%edi
 8048444:	56                   	push   %esi
 8048445:	53                   	push   %ebx
 8048446:	e8 05 ff ff ff       	call   8048350 <__x86.get_pc_thunk.bx>
 804844b:	81 c3 b5 1b 00 00    	add    $0x1bb5,%ebx
 8048451:	83 ec 1c             	sub    $0x1c,%esp
 8048454:	8b 6c 24 30          	mov    0x30(%esp),%ebp
 8048458:	8d b3 0c ff ff ff    	lea    -0xf4(%ebx),%esi
 804845e:	e8 4d fe ff ff       	call   80482b0 <_init>
 8048463:	8d 83 08 ff ff ff    	lea    -0xf8(%ebx),%eax
 8048469:	29 c6                	sub    %eax,%esi
 804846b:	c1 fe 02             	sar    $0x2,%esi
 804846e:	85 f6                	test   %esi,%esi
 8048470:	74 27                	je     8048499 <__libc_csu_init+0x59>
 8048472:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 8048478:	8b 44 24 38          	mov    0x38(%esp),%eax
 804847c:	89 2c 24             	mov    %ebp,(%esp)
 804847f:	89 44 24 08          	mov    %eax,0x8(%esp)
 8048483:	8b 44 24 34          	mov    0x34(%esp),%eax
 8048487:	89 44 24 04          	mov    %eax,0x4(%esp)
 804848b:	ff 94 bb 08 ff ff ff 	call   *-0xf8(%ebx,%edi,4)
 8048492:	83 c7 01             	add    $0x1,%edi
 8048495:	39 f7                	cmp    %esi,%edi
 8048497:	75 df                	jne    8048478 <__libc_csu_init+0x38>
 8048499:	83 c4 1c             	add    $0x1c,%esp
 804849c:	5b                   	pop    %ebx
 804849d:	5e                   	pop    %esi
 804849e:	5f                   	pop    %edi
 804849f:	5d                   	pop    %ebp
 80484a0:	c3                   	ret    
 80484a1:	eb 0d                	jmp    80484b0 <__libc_csu_fini>
 80484a3:	90                   	nop
 80484a4:	90                   	nop
 80484a5:	90                   	nop
 80484a6:	90                   	nop
 80484a7:	90                   	nop
 80484a8:	90                   	nop
 80484a9:	90                   	nop
 80484aa:	90                   	nop
 80484ab:	90                   	nop
 80484ac:	90                   	nop
 80484ad:	90                   	nop
 80484ae:	90                   	nop
 80484af:	90                   	nop

080484b0 <__libc_csu_fini>:
 80484b0:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

080484b4 <_fini>:
 80484b4:	53                   	push   %ebx
 80484b5:	83 ec 08             	sub    $0x8,%esp
 80484b8:	e8 93 fe ff ff       	call   8048350 <__x86.get_pc_thunk.bx>
 80484bd:	81 c3 43 1b 00 00    	add    $0x1b43,%ebx
 80484c3:	83 c4 08             	add    $0x8,%esp
 80484c6:	5b                   	pop    %ebx
 80484c7:	c3                   	ret    

セクション .rodata の逆アセンブル:

080484c8 <_fp_hw>:
 80484c8:	03 00                	add    (%eax),%eax
	...

080484cc <_IO_stdin_used>:
 80484cc:	01 00                	add    %eax,(%eax)
 80484ce:	02 00                	add    (%eax),%al
 80484d0:	68 65 6c 6c 6f       	push   $0x6f6c6c65
 80484d5:	20 77 6f             	and    %dh,0x6f(%edi)
 80484d8:	72 6c                	jb     8048546 <_IO_stdin_used+0x7a>
 80484da:	64                   	fs
	...

セクション .eh_frame_hdr の逆アセンブル:

080484dc <.eh_frame_hdr>:
 80484dc:	01 1b                	add    %ebx,(%ebx)
 80484de:	03 3b                	add    (%ebx),%edi
 80484e0:	28 00                	sub    %al,(%eax)
 80484e2:	00 00                	add    %al,(%eax)
 80484e4:	04 00                	add    $0x0,%al
 80484e6:	00 00                	add    %al,(%eax)
 80484e8:	04 fe                	add    $0xfe,%al
 80484ea:	ff                   	(bad)  
 80484eb:	ff 44 00 00          	incl   0x0(%eax,%eax,1)
 80484ef:	00 41 ff             	add    %al,-0x1(%ecx)
 80484f2:	ff                   	(bad)  
 80484f3:	ff 68 00             	ljmp   *0x0(%eax)
 80484f6:	00 00                	add    %al,(%eax)
 80484f8:	64                   	fs
 80484f9:	ff                   	(bad)  
 80484fa:	ff                   	(bad)  
 80484fb:	ff 88 00 00 00 d4    	decl   -0x2c000000(%eax)
 8048501:	ff                   	(bad)  
 8048502:	ff                   	(bad)  
 8048503:	ff c4                	inc    %esp
 8048505:	00 00                	add    %al,(%eax)
	...

セクション .eh_frame の逆アセンブル:

08048508 <__FRAME_END__-0xac>:
 8048508:	14 00                	adc    $0x0,%al
 804850a:	00 00                	add    %al,(%eax)
 804850c:	00 00                	add    %al,(%eax)
 804850e:	00 00                	add    %al,(%eax)
 8048510:	01 7a 52             	add    %edi,0x52(%edx)
 8048513:	00 01                	add    %al,(%ecx)
 8048515:	7c 08                	jl     804851f <_IO_stdin_used+0x53>
 8048517:	01 1b                	add    %ebx,(%ebx)
 8048519:	0c 04                	or     $0x4,%al
 804851b:	04 88                	add    $0x88,%al
 804851d:	01 00                	add    %eax,(%eax)
 804851f:	00 20                	add    %ah,(%eax)
 8048521:	00 00                	add    %al,(%eax)
 8048523:	00 1c 00             	add    %bl,(%eax,%eax,1)
 8048526:	00 00                	add    %al,(%eax)
 8048528:	b8 fd ff ff 40       	mov    $0x40fffffd,%eax
 804852d:	00 00                	add    %al,(%eax)
 804852f:	00 00                	add    %al,(%eax)
 8048531:	0e                   	push   %cs
 8048532:	08 46 0e             	or     %al,0xe(%esi)
 8048535:	0c 4a                	or     $0x4a,%al
 8048537:	0f 0b                	ud2    
 8048539:	74 04                	je     804853f <_IO_stdin_used+0x73>
 804853b:	78 00                	js     804853d <_IO_stdin_used+0x71>
 804853d:	3f                   	aas    
 804853e:	1a 3b                	sbb    (%ebx),%bh
 8048540:	2a 32                	sub    (%edx),%dh
 8048542:	24 22                	and    $0x22,%al
 8048544:	1c 00                	sbb    $0x0,%al
 8048546:	00 00                	add    %al,(%eax)
 8048548:	40                   	inc    %eax
 8048549:	00 00                	add    %al,(%eax)
 804854b:	00 d1                	add    %dl,%cl
 804854d:	fe                   	(bad)  
 804854e:	ff                   	(bad)  
 804854f:	ff 1c 00             	lcall  *(%eax,%eax,1)
 8048552:	00 00                	add    %al,(%eax)
 8048554:	00 41 0e             	add    %al,0xe(%ecx)
 8048557:	08 85 02 42 0d 05    	or     %al,0x50d4202(%ebp)
 804855d:	58                   	pop    %eax
 804855e:	c5 0c 04             	lds    (%esp,%eax,1),%ecx
 8048561:	04 00                	add    $0x0,%al
 8048563:	00 38                	add    %bh,(%eax)
 8048565:	00 00                	add    %al,(%eax)
 8048567:	00 60 00             	add    %ah,0x0(%eax)
 804856a:	00 00                	add    %al,(%eax)
 804856c:	d4 fe                	aam    $0xfe
 804856e:	ff                   	(bad)  
 804856f:	ff 61 00             	jmp    *0x0(%ecx)
 8048572:	00 00                	add    %al,(%eax)
 8048574:	00 41 0e             	add    %al,0xe(%ecx)
 8048577:	08 85 02 41 0e 0c    	or     %al,0xc0e4102(%ebp)
 804857d:	87 03                	xchg   %eax,(%ebx)
 804857f:	43                   	inc    %ebx
 8048580:	0e                   	push   %cs
 8048581:	10 86 04 41 0e 14    	adc    %al,0x140e4104(%esi)
 8048587:	83 05 4e 0e 30 02 48 	addl   $0x48,0x2300e4e
 804858e:	0e                   	push   %cs
 804858f:	14 41                	adc    $0x41,%al
 8048591:	c3                   	ret    
 8048592:	0e                   	push   %cs
 8048593:	10 41 c6             	adc    %al,-0x3a(%ecx)
 8048596:	0e                   	push   %cs
 8048597:	0c 41                	or     $0x41,%al
 8048599:	c7                   	(bad)  
 804859a:	0e                   	push   %cs
 804859b:	08 41 c5             	or     %al,-0x3b(%ecx)
 804859e:	0e                   	push   %cs
 804859f:	04 10                	add    $0x10,%al
 80485a1:	00 00                	add    %al,(%eax)
 80485a3:	00 9c 00 00 00 08 ff 	add    %bl,-0xf80000(%eax,%eax,1)
 80485aa:	ff                   	(bad)  
 80485ab:	ff 02                	incl   (%edx)
 80485ad:	00 00                	add    %al,(%eax)
 80485af:	00 00                	add    %al,(%eax)
 80485b1:	00 00                	add    %al,(%eax)
	...

080485b4 <__FRAME_END__>:
 80485b4:	00 00                	add    %al,(%eax)
	...

セクション .init_array の逆アセンブル:

08049f08 <__frame_dummy_init_array_entry>:
 8049f08:	f0                   	lock
 8049f09:	83                   	.byte 0x83
 8049f0a:	04 08                	add    $0x8,%al

セクション .fini_array の逆アセンブル:

08049f0c <__do_global_dtors_aux_fini_array_entry>:
 8049f0c:	d0                   	.byte 0xd0
 8049f0d:	83                   	.byte 0x83
 8049f0e:	04 08                	add    $0x8,%al

セクション .jcr の逆アセンブル:

08049f10 <__JCR_END__>:
 8049f10:	00 00                	add    %al,(%eax)
	...

セクション .dynamic の逆アセンブル:

08049f14 <_DYNAMIC>:
 8049f14:	01 00                	add    %eax,(%eax)
 8049f16:	00 00                	add    %al,(%eax)
 8049f18:	01 00                	add    %eax,(%eax)
 8049f1a:	00 00                	add    %al,(%eax)
 8049f1c:	0c 00                	or     $0x0,%al
 8049f1e:	00 00                	add    %al,(%eax)
 8049f20:	b0 82                	mov    $0x82,%al
 8049f22:	04 08                	add    $0x8,%al
 8049f24:	0d 00 00 00 b4       	or     $0xb4000000,%eax
 8049f29:	84 04 08             	test   %al,(%eax,%ecx,1)
 8049f2c:	19 00                	sbb    %eax,(%eax)
 8049f2e:	00 00                	add    %al,(%eax)
 8049f30:	08 9f 04 08 1b 00    	or     %bl,0x1b0804(%edi)
 8049f36:	00 00                	add    %al,(%eax)
 8049f38:	04 00                	add    $0x0,%al
 8049f3a:	00 00                	add    %al,(%eax)
 8049f3c:	1a 00                	sbb    (%eax),%al
 8049f3e:	00 00                	add    %al,(%eax)
 8049f40:	0c 9f                	or     $0x9f,%al
 8049f42:	04 08                	add    $0x8,%al
 8049f44:	1c 00                	sbb    $0x0,%al
 8049f46:	00 00                	add    %al,(%eax)
 8049f48:	04 00                	add    $0x0,%al
 8049f4a:	00 00                	add    %al,(%eax)
 8049f4c:	f5                   	cmc    
 8049f4d:	fe                   	(bad)  
 8049f4e:	ff 6f ac             	ljmp   *-0x54(%edi)
 8049f51:	81 04 08 05 00 00 00 	addl   $0x5,(%eax,%ecx,1)
 8049f58:	1c 82                	sbb    $0x82,%al
 8049f5a:	04 08                	add    $0x8,%al
 8049f5c:	06                   	push   %es
 8049f5d:	00 00                	add    %al,(%eax)
 8049f5f:	00 cc                	add    %cl,%ah
 8049f61:	81 04 08 0a 00 00 00 	addl   $0xa,(%eax,%ecx,1)
 8049f68:	4a                   	dec    %edx
 8049f69:	00 00                	add    %al,(%eax)
 8049f6b:	00 0b                	add    %cl,(%ebx)
 8049f6d:	00 00                	add    %al,(%eax)
 8049f6f:	00 10                	add    %dl,(%eax)
 8049f71:	00 00                	add    %al,(%eax)
 8049f73:	00 15 00 00 00 00    	add    %dl,0x0
 8049f79:	00 00                	add    %al,(%eax)
 8049f7b:	00 03                	add    %al,(%ebx)
 8049f7d:	00 00                	add    %al,(%eax)
 8049f7f:	00 00                	add    %al,(%eax)
 8049f81:	a0 04 08 02 00       	mov    0x20804,%al
 8049f86:	00 00                	add    %al,(%eax)
 8049f88:	18 00                	sbb    %al,(%eax)
 8049f8a:	00 00                	add    %al,(%eax)
 8049f8c:	14 00                	adc    $0x0,%al
 8049f8e:	00 00                	add    %al,(%eax)
 8049f90:	11 00                	adc    %eax,(%eax)
 8049f92:	00 00                	add    %al,(%eax)
 8049f94:	17                   	pop    %ss
 8049f95:	00 00                	add    %al,(%eax)
 8049f97:	00 98 82 04 08 11    	add    %bl,0x11080482(%eax)
 8049f9d:	00 00                	add    %al,(%eax)
 8049f9f:	00 90 82 04 08 12    	add    %dl,0x12080482(%eax)
 8049fa5:	00 00                	add    %al,(%eax)
 8049fa7:	00 08                	add    %cl,(%eax)
 8049fa9:	00 00                	add    %al,(%eax)
 8049fab:	00 13                	add    %dl,(%ebx)
 8049fad:	00 00                	add    %al,(%eax)
 8049faf:	00 08                	add    %cl,(%eax)
 8049fb1:	00 00                	add    %al,(%eax)
 8049fb3:	00 fe                	add    %bh,%dh
 8049fb5:	ff                   	(bad)  
 8049fb6:	ff 6f 70             	ljmp   *0x70(%edi)
 8049fb9:	82                   	(bad)  
 8049fba:	04 08                	add    $0x8,%al
 8049fbc:	ff                   	(bad)  
 8049fbd:	ff                   	(bad)  
 8049fbe:	ff 6f 01             	ljmp   *0x1(%edi)
 8049fc1:	00 00                	add    %al,(%eax)
 8049fc3:	00 f0                	add    %dh,%al
 8049fc5:	ff                   	(bad)  
 8049fc6:	ff 6f 66             	ljmp   *0x66(%edi)
 8049fc9:	82                   	(bad)  
 8049fca:	04 08                	add    $0x8,%al
	...

セクション .got の逆アセンブル:

08049ffc <.got>:
 8049ffc:	00 00                	add    %al,(%eax)
	...

セクション .got.plt の逆アセンブル:

0804a000 <_GLOBAL_OFFSET_TABLE_>:
 804a000:	14 9f                	adc    $0x9f,%al
 804a002:	04 08                	add    $0x8,%al
	...
 804a00c:	f6 82 04 08 06 83 04 	testb  $0x4,-0x7cf9f7fc(%edx)
 804a013:	08 16                	or     %dl,(%esi)
 804a015:	83                   	.byte 0x83
 804a016:	04 08                	add    $0x8,%al

セクション .data の逆アセンブル:

0804a018 <__data_start>:
 804a018:	00 00                	add    %al,(%eax)
	...

0804a01c <__dso_handle>:
 804a01c:	00 00                	add    %al,(%eax)
	...

セクション .bss の逆アセンブル:

0804a020 <__bss_start>:
 804a020:	00 00                	add    %al,(%eax)
	...

セクション .comment の逆アセンブル:

00000000 <.comment>:
   0:	47                   	inc    %edi
   1:	43                   	inc    %ebx
   2:	43                   	inc    %ebx
   3:	3a 20                	cmp    (%eax),%ah
   5:	28 55 62             	sub    %dl,0x62(%ebp)
   8:	75 6e                	jne    78 <_init-0x8048238>
   a:	74 75                	je     81 <_init-0x804822f>
   c:	20 34 2e             	and    %dh,(%esi,%ebp,1)
   f:	38 2e                	cmp    %ch,(%esi)
  11:	34 2d                	xor    $0x2d,%al
  13:	32 75 62             	xor    0x62(%ebp),%dh
  16:	75 6e                	jne    86 <_init-0x804822a>
  18:	74 75                	je     8f <_init-0x8048221>
  1a:	31 7e 31             	xor    %edi,0x31(%esi)
  1d:	34 2e                	xor    $0x2e,%al
  1f:	30 34 29             	xor    %dh,(%ecx,%ebp,1)
  22:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  25:	38 2e                	cmp    %ch,(%esi)
  27:	34 00                	xor    $0x0,%al
  29:	47                   	inc    %edi
  2a:	43                   	inc    %ebx
  2b:	43                   	inc    %ebx
  2c:	3a 20                	cmp    (%eax),%ah
  2e:	28 55 62             	sub    %dl,0x62(%ebp)
  31:	75 6e                	jne    a1 <_init-0x804820f>
  33:	74 75                	je     aa <_init-0x8048206>
  35:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  38:	38 2e                	cmp    %ch,(%esi)
  3a:	32 2d 31 39 75 62    	xor    0x62753931,%ch
  40:	75 6e                	jne    b0 <_init-0x8048200>
  42:	74 75                	je     b9 <_init-0x80481f7>
  44:	31 29                	xor    %ebp,(%ecx)
  46:	20 34 2e             	and    %dh,(%esi,%ebp,1)
  49:	38 2e                	cmp    %ch,(%esi)
  4b:	32 00                	xor    (%eax),%al
